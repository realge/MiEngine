#version 450

#define MAX_LIGHTS 16
#define PI 3.14159265359

layout(location = 0) in vec3 fragPos;
layout(location = 1) in vec2 fragTexCoord;
layout(location = 2) in vec3 fragNormal;
layout(location = 3) in vec3 fragTangent;
layout(location = 4) in vec3 fragBitangent;
layout(location = 5) in vec3 fragCameraPos;

layout(binding = 0) uniform UniformBufferObject {
    mat4 view;
    mat4 proj;
    vec4 cameraPos;
    int numLights;
    vec4 padding[3];
} ubo;

struct Light {
    vec4 position;   // w = 0 for directional, 1 for point
    vec4 color;      // w = intensity
    vec4 direction;  // w = range for point lights
    vec4 params;     // x = spot inner angle, y = spot outer angle, z = cast shadows
};

layout(binding = 1) uniform LightBuffer {
    Light lights[MAX_LIGHTS];
} lightBuffer;

layout(binding = 2) uniform sampler2D shadowMaps[MAX_LIGHTS];
layout(binding = 3) uniform sampler2D baseColorMap;
layout(binding = 4) uniform sampler2D normalMap;
layout(binding = 5) uniform sampler2D metallicMap;
layout(binding = 6) uniform sampler2D roughnessMap;
layout(binding = 7) uniform sampler2D aoMap;
layout(binding = 8) uniform sampler2D emissiveMap;

layout(push_constant) uniform PushConstants {
    mat4 model;
    vec4 baseColorFactor;
    vec4 metallicRoughnessFactor;  // x=metallic, y=roughness
    vec4 emissiveFactor;          // xyz=color, w=strength
} push;

layout(location = 0) out vec4 outColor;

// PBR functions
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom, 0.001);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

void main() {
    // Sample textures
    vec4 baseColor = texture(baseColorMap, fragTexCoord) * push.baseColorFactor;
    float metallic = texture(metallicMap, fragTexCoord).r * push.metallicRoughnessFactor.x;
    float roughness = texture(roughnessMap, fragTexCoord).r * push.metallicRoughnessFactor.y;
    float ao = texture(aoMap, fragTexCoord).r;
    vec3 emissive = texture(emissiveMap, fragTexCoord).rgb * push.emissiveFactor.xyz * push.emissiveFactor.w;

    // Calculate normal from normal map
    vec3 N = normalize(fragNormal);
    vec3 T = normalize(fragTangent);
    vec3 B = normalize(fragBitangent);
    mat3 TBN = mat3(T, B, N);
    vec3 normalMap = texture(normalMap, fragTexCoord).rgb * 2.0 - 1.0;
    N = normalize(TBN * normalMap);

    vec3 V = normalize(fragCameraPos - fragPos);
    vec3 F0 = mix(vec3(0.04), baseColor.rgb, metallic);

    // Reflectance equation
    vec3 Lo = vec3(0.0);

    // Calculate lighting for each light
    for(int i = 0; i < ubo.numLights; i++) {
        vec3 L;
        float attenuation = 1.0;
        
        if(lightBuffer.lights[i].position.w < 0.1) { // Directional light
            L = normalize(-lightBuffer.lights[i].direction.xyz);
        } else { // Point/spot light
            vec3 lightDir = lightBuffer.lights[i].position.xyz - fragPos;
            float distance = length(lightDir);
            L = normalize(lightDir);
            
            // Calculate attenuation
            float range = lightBuffer.lights[i].direction.w;
            attenuation = 1.0 / (1.0 + (distance / range));
            
            // Spot light calculations
            if(lightBuffer.lights[i].params.x > 0.0) {
                float theta = dot(L, normalize(-lightBuffer.lights[i].direction.xyz));
                float epsilon = lightBuffer.lights[i].params.x - lightBuffer.lights[i].params.y;
                attenuation *= clamp((theta - lightBuffer.lights[i].params.y) / epsilon, 0.0, 1.0);
            }
        }

        vec3 H = normalize(V + L);

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = numerator / max(denominator, 0.001);

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);

        // Shadow calculation
        float shadow = 1.0;
        if(lightBuffer.lights[i].params.z > 0.5) {
            // Add shadow mapping calculation here
        }

        vec3 radiance = lightBuffer.lights[i].color.rgb * lightBuffer.lights[i].color.w * attenuation;
        Lo += (kD * baseColor.rgb / PI + specular) * radiance * NdotL * shadow;
    }

    // Ambient lighting
    vec3 ambient = vec3(0.03) * baseColor.rgb * ao;
    vec3 color = ambient + Lo + emissive;

    // HDR tonemapping and gamma correction handled in post-processing
    outColor = vec4(color, baseColor.a);
}