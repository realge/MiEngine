#version 450
#extension GL_ARB_separate_shader_objects : enable

// Constants
const float PI = 3.14159265359;
const float EPSILON = 0.00001;
const int MAX_LIGHTS = 16;

// Input from vertex shader
layout(location = 0) in vec3 fragColor;
layout(location = 1) in vec2 fragTexCoord;
layout(location = 2) in vec3 fragNormal;
layout(location = 3) in vec3 fragPosition;
layout(location = 4) in mat3 TBN;
layout(location = 7) in vec3 fragViewDir;

// Standard PBR material textures
layout(binding = 2) uniform sampler2D albedoMap;
layout(binding = 3) uniform sampler2D normalMap;
layout(binding = 4) uniform sampler2D metallicRoughnessMap;
layout(binding = 5) uniform sampler2D occlusionMap;
layout(binding = 6) uniform sampler2D emissiveMap;

// IBL textures
layout(binding = 7) uniform samplerCube irradianceMap;      // Diffuse environment lighting
layout(binding = 8) uniform samplerCube prefilterMap;       // Specular environment lighting
layout(binding = 9) uniform sampler2D brdfLUT;             // BRDF integration lookup

// Material parameters uniform
layout(binding = 1) uniform MaterialUBO {
    vec4 baseColorFactor;
    float metallicFactor;
    float roughnessFactor;
    float aoStrength;
    float emissiveStrength;
    int hasBaseColorMap;
    int hasNormalMap;
    int hasMetallicRoughnessMap;
    int hasOcclusionMap;
    int hasEmissiveMap;
    float alphaCutoff;
    int alphaMode;
    vec2 padding;
} material;

// Light data
struct Light {
    vec4 position;    // w=0 for directional, w=1 for point
    vec4 color;       // rgb + intensity
    float radius;
    float falloff;
    vec2 padding;
};

// Light uniform buffer
layout(binding = 10) uniform LightUBO {
    int lightCount;
    int padding[3];
    Light lights[MAX_LIGHTS];
    vec4 ambientColor;
} lightData;

// Camera position from vertex UBO
layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec3 cameraPos;
    float time;
} ubo;

// Output color
layout(location = 0) out vec4 outColor;

// PBR functions
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    
    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    
    return nom / max(denom, EPSILON);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    
    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    
    return nom / max(denom, EPSILON);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, roughness);
    float ggx2 = GeometrySchlickGGX(NdotL, roughness);
    
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

// Fresnel Schlick roughness variation for IBL
vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

// Normal mapping function
vec3 getNormalFromMap() {
    vec3 tangentNormal = texture(normalMap, fragTexCoord).xyz * 2.0 - 1.0;
    
    // Transform normal from tangent to world space
    vec3 worldNormal = normalize(TBN * tangentNormal);
    return worldNormal;
}

void main() {
    // Sample material textures
    vec4 albedo = material.hasBaseColorMap > 0 ? texture(albedoMap, fragTexCoord) : vec4(1.0);
    albedo *= material.baseColorFactor;
    albedo.rgb *= fragColor; // Apply vertex color

    // Early discard for alpha testing
    if (material.alphaMode == 1 && albedo.a < material.alphaCutoff) {
        discard;
    }
    
    // Sample metallic and roughness
    float metallic = material.metallicFactor;
    float roughness = material.roughnessFactor;
    
    if (material.hasMetallicRoughnessMap > 0) {
        vec4 metallicRoughness = texture(metallicRoughnessMap, fragTexCoord);
        metallic = metallicRoughness.b * material.metallicFactor;
        roughness = metallicRoughness.g * material.roughnessFactor;
    }
    
    // Clamp roughness to avoid division by zero
    roughness = max(roughness, 0.04);
    
    // Sample ambient occlusion
    float ao = 1.0;
    if (material.hasOcclusionMap > 0) {
        ao = texture(occlusionMap, fragTexCoord).r;
        ao = mix(1.0, ao, material.aoStrength);
    }
    
    // Get normal
    vec3 N = material.hasNormalMap > 0 ? getNormalFromMap() : normalize(fragNormal);
    vec3 V = normalize(ubo.cameraPos - fragPosition);
    
    // Calculate reflectance at normal incidence
    vec3 F0 = vec3(0.04); // Default reflectance for dielectrics
    F0 = mix(F0, albedo.rgb, metallic); // For metals, reflectance is tinted by albedo
    
    // Final lighting result
    vec3 Lo = vec3(0.0); // Outgoing radiance
    
    // Directional and point lights contribution
    for(int i = 0; i < min(lightData.lightCount, MAX_LIGHTS); i++) {
        // Extract light data
        vec3 lightPos = lightData.lights[i].position.xyz;
        float isDirectional = 1.0 - lightData.lights[i].position.w;
        vec3 lightColor = lightData.lights[i].color.rgb;
        float lightIntensity = lightData.lights[i].color.a;
        
        // Calculate light direction and attenuation
        vec3 L;
        float attenuation;
        
        if(isDirectional > 0.5) {
            // Directional light
            L = normalize(-lightPos);
            attenuation = 1.0;
        } else {
            // Point light
            float distance = length(lightPos - fragPosition);
            L = normalize(lightPos - fragPosition);
            
            // Physically-based attenuation
            float lightRadius = max(lightData.lights[i].radius, 0.01);
            float falloff = lightData.lights[i].falloff;
            
            // Inverse square with smooth falloff at radius edge
            attenuation = pow(max(1.0 - pow(distance / lightRadius, falloff), 0.0), 2.0) / (1.0 + distance * distance);
        }
        
        // Skip calculations if the light doesn't contribute
        float NdotL = max(dot(N, L), 0.0);
        if (NdotL <= 0.0) continue;
        
        // Calculate intermediate vectors
        vec3 H = normalize(V + L);
        
        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);
        
        // Calculate specular contribution
        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
        vec3 specular = numerator / max(denominator, EPSILON);
        
        // Energy conservation
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic; // No diffuse for metals
        
        // Add light contribution
        vec3 radiance = lightColor * lightIntensity * attenuation;
        Lo += (kD * albedo.rgb / PI + specular) * radiance * NdotL;
    }
    
    // IBL (Image-Based Lighting) contribution
    vec3 R = reflect(-V, N);
    
    // Sample irradiance map (diffuse IBL)
    vec3 irradiance = texture(irradianceMap, N).rgb;
    
    // Sample prefiltered environment map (specular IBL)
    // Use higher mipmap levels for rougher surfaces
    vec3 prefilteredColor = textureLod(prefilterMap, R, roughness * 4.0).rgb;
    
    // Sample BRDF LUT
    vec2 brdf = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
    
    // Fresnel for IBL
    vec3 F_ibl = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    
    // Diffuse and specular IBL contributions
    vec3 kS_ibl = F_ibl;
    vec3 kD_ibl = (1.0 - kS_ibl) * (1.0 - metallic);
    
    vec3 diffuseIBL = kD_ibl * irradiance * albedo.rgb;
    vec3 specularIBL = prefilteredColor * (F_ibl * brdf.x + brdf.y);
    
    // Combine IBL lighting
    vec3 ambient = (diffuseIBL + specularIBL) * ao;
    
    // Emissive contribution
    vec3 emissive = vec3(0.0);
    if (material.hasEmissiveMap > 0) {
        emissive = texture(emissiveMap, fragTexCoord).rgb * material.emissiveStrength;
    }
    
    // Final color is direct lighting + IBL + emissive
    vec3 color = Lo + ambient + emissive;
    
    // HDR tonemapping
    color = color / (color + vec3(1.0)); // Reinhard tone mapping
    
    // Gamma correction
    color = pow(color, vec3(1.0/2.2));
    
    outColor = vec4(color, albedo.a);
}